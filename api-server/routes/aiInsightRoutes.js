// api-server/routes/aiInsightRoutes.js
const express = require('express');
const router = express.Router();
const pool = require('../models/db');
const OpenAI = require('openai');
require('dotenv').config();

/** ÎåÄÏÉÅ Í∏∞Í∞Ñ Í≥ÑÏÇ∞ (Í∏∞Î≥∏: Îã§ÏùåÎã¨) */
function getTargetPeriod(q) {
  if (q?.period && /^\d{4}-\d{2}$/.test(q.period)) {
    const [y, m] = q.period.split('-').map(Number);
    return { year: y, month: m };
  }
  const now = new Date();
  const y = now.getUTCFullYear();
  const m = now.getUTCMonth() + 1;
  const next = new Date(Date.UTC(y, m, 1));
  next.setUTCMonth(next.getUTCMonth() + 1);
  return { year: next.getUTCFullYear(), month: next.getUTCMonth() + 1 };
}

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

/**
 * ÏµúÍ∑º Îß§Ï∂ú ÏöîÏïΩÏùÑ DBÏóêÏÑú ÎΩëÏïÑÏò§Í∏∞
 * üîß Î≥ÄÍ≤ΩÏ†ê:
 *  - ÏÉÅÌíàÎ™ÖÏùÄ store_productsÍ∞Ä ÏïÑÎãàÎùº productsÏóê ÏûàÎã§Í≥† Í∞ÄÏ†ï ‚Üí productsÎ•º JOINÌïòÍ≥† pr.name ÏÇ¨Ïö©
 *  - ÎßåÏïΩ Ïª¨ÎüºÎ™ÖÏù¥ Îã§Î•¥Î©¥ ÏïÑÎûò pr.nameÏùÑ pr.product_name Îì±ÏúºÎ°ú Î∞îÍøîÏ£ºÏÑ∏Ïöî.
 */
async function getSalesSummaryFromDB() {
  // ÏµúÍ∑º 3Í∞úÏõî Î≤†Ïä§Ìä∏
  const [topSold] = await pool.query(`
    SELECT
      sp.id AS product_id,
      pr.name AS name,                         -- ‚úÖ ÏÉÅÌíàÎ™ÖÏùÄ productsÏóêÏÑú
      SUM(p.quantity) AS total_qty,
      SUM(p.total_price) AS total_revenue
    FROM purchases p
    JOIN store_products sp ON sp.id = p.store_product_id
    JOIN products pr ON pr.id = sp.product_id -- ‚úÖ JOIN Ï∂îÍ∞Ä
    WHERE p.created_at >= DATE_SUB(UTC_TIMESTAMP(), INTERVAL 3 MONTH)
    GROUP BY sp.id, pr.name
    ORDER BY total_qty DESC
    LIMIT 15
  `);

  // ÏµúÍ∑º 1Í∞úÏõî vs ÏßÅÏ†Ñ 1Í∞úÏõî Ï¶ùÍ∞ê
  const [trend] = await pool.query(`
    SELECT
      t.product_id,
      t.name,
      t.qty_recent,
      t.qty_prev,
      CASE
        WHEN t.qty_prev = 0 THEN 100
        ELSE ROUND(((t.qty_recent - t.qty_prev) / t.qty_prev) * 100, 1)
      END AS growth_pct
    FROM (
      SELECT
        sp.id AS product_id,
        pr.name AS name,  -- ‚úÖ ÎèôÏùºÌïòÍ≤å productsÏóêÏÑú Ïù¥Î¶Ñ
        SUM(CASE WHEN p.created_at >= DATE_SUB(UTC_TIMESTAMP(), INTERVAL 1 MONTH)
                 THEN p.quantity ELSE 0 END) AS qty_recent,
        SUM(CASE
              WHEN p.created_at <  DATE_SUB(UTC_TIMESTAMP(), INTERVAL 1 MONTH)
               AND p.created_at >= DATE_SUB(UTC_TIMESTAMP(), INTERVAL 2 MONTH)
             THEN p.quantity ELSE 0 END) AS qty_prev
      FROM purchases p
      JOIN store_products sp ON sp.id = p.store_product_id
      JOIN products pr ON pr.id = sp.product_id
      WHERE p.created_at >= DATE_SUB(UTC_TIMESTAMP(), INTERVAL 2 MONTH)
      GROUP BY sp.id, pr.name
    ) t
    ORDER BY growth_pct DESC
    LIMIT 10
  `);

  return { topSold, trend };
}

/** OpenAIÎ°ú Ïù∏ÏÇ¨Ïù¥Ìä∏ ÏÉùÏÑ± */
async function generateInsightText({ summary, period }) {
  const sys = `ÎãπÏã†ÏùÄ ÏÜåÎß§Ï†ê Îß§Ï∂ú/Ïû¨Í≥† Ïª®ÏÑ§ÌÑ¥Ìä∏ÏûÖÎãàÎã§. ÌïúÍµ≠Ïñ¥Î°ú Í∞ÑÍ≤∞ÌïòÍ≥† Ïã§Ïö©Ï†ÅÏù∏ Ï†úÏïàÏùÑ Ìï¥Ï£ºÏÑ∏Ïöî.`;
  const user = `
Îã§ÏùåÏùÄ ÏµúÍ∑º Îß§Ï∂ú ÏöîÏïΩ Îç∞Ïù¥ÌÑ∞ÏûÖÎãàÎã§. Ïù¥Î•º Ï∞∏Í≥†Ìï¥
"${period.year}ÎÖÑ ${period.month}Ïõî" ÏûÖÍ≥† Ï†ÑÎûµ, Ïû¨Í≥† Ï¶ùÍ∞ê Ï∂îÏ≤ú, Ï£ºÎßê/ÌèâÏùº Ïö¥ÏòÅ ÌåÅÏùÑ Ï†úÏïàÌïòÏÑ∏Ïöî.

Îç∞Ïù¥ÌÑ∞(JSON):
${JSON.stringify(summary, null, 2)}

Ï∂úÎ†• ÌòïÏãù(ÎßàÌÅ¨Îã§Ïö¥):
- ÏöîÏïΩ: (Ìïú Î¨∏Ïû•)
- Ï∂îÏ≤ú ÏÉÅÌíà: (3~5Í∞ú, Í∞ÅÍ∞Å ÏÇ¨Ïú†/ÏòàÏÉÅ Ìö®Í≥º)
- Ìä∏Î†åÎìú: (Ï¶ùÍ∞Ä/Í∞êÏÜå ÌíàÎ™© Í∞ÑÎã® Ïñ∏Í∏â)
- Ïï°ÏÖò ÏïÑÏù¥ÌÖú: (ÏûÖÍ≥† ÏàòÎüâ/Ï£ºÎ¨∏ ÌÉÄÏù¥Î∞ç/ÏßÑÏó¥ ÌåÅ 3~5Í∞ú)
- Ï†êÏ£ºÏóêÍ≤å: (ÏûêÏó∞Ïä§Îü¨Ïö¥ Ìïú Î¨∏Ïû• Ï†úÏïà, Ïòà: "Îã§ÏùåÎã¨ÏóêÎäî ‚óã‚óã ÏÉÅÌíàÏùò ÏûÖÍ≥† ÏàòÎüâÏùÑ 30% ÎäòÎ†§Î≥¥Îäî Í≤å Ï¢ãÍ≤†ÏäµÎãàÎã§.")
`;

  const resp = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    temperature: 0.7,
    messages: [
      { role: 'system', content: sys },
      { role: 'user', content: user }
    ],
  });

  return resp.choices?.[0]?.message?.content?.trim() || 'Í≤∞Í≥ºÎ•º ÏÉùÏÑ±ÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§.';
}

/**
 * GET /api/ai-insight/insight
 *  - ?period=YYYY-MM (ÏòµÏÖò, ÏóÜÏúºÎ©¥ Îã§ÏùåÎã¨)
 *  - ?force=true Ï∫êÏãú Î¨¥Ïãú Ïû¨ÏÉùÏÑ±
 */
router.get('/insight', async (req, res) => {
  try {
    const { year, month } = getTargetPeriod(req.query);
    const useCache = req.query.force !== 'true';

    // Ï∫êÏãú Ï°∞Ìöå
    if (useCache) {
      const [[cached]] = await pool.query(
        `SELECT content, created_at
           FROM ai_insights
          WHERE scope='store' AND period_year=? AND period_month=?`,
        [year, month]
      );
      if (cached) {
        return res.json({
          ok: true,
          period: { year, month },
          cached: true,
          insight: cached.content,
          created_at: cached.created_at,
        });
      }
    }

    // DB ÏöîÏïΩ
    const summary = await getSalesSummaryFromDB();

    // OpenAI ÏÉùÏÑ±
    const content = await generateInsightText({ summary, period: { year, month } });

    // Ï∫êÏãú Ï†ÄÏû•
    try {
      await pool.query(
        `INSERT INTO ai_insights (scope, period_year, period_month, content)
         VALUES ('store', ?, ?, ?)
         ON DUPLICATE KEY UPDATE content=VALUES(content), created_at=CURRENT_TIMESTAMP`,
        [year, month, content]
      );
    } catch (e) {
      console.warn('AI insight cache save failed:', e.message);
    }

    res.json({
      ok: true,
      period: { year, month },
      cached: false,
      insight: content,
    });
  } catch (e) {
    console.error(e);
    res.status(500).json({ ok: false, error: e.message || String(e) });
  }
});

module.exports = router;
